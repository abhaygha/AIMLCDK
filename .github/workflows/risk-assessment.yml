name: AI/ML CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  assess-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GITHUB_DEPLOY_ROLE_ARN }}
          aws-region: us-east-1
      
      # Deploy infrastructure first to ensure Lambda exists
      - name: Deploy Infrastructure
        run: |
          npm run build
          npx cdk deploy --all --require-approval never
        env:
          AWS_DEFAULT_REGION: us-east-1
      
      # Install dependencies
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
      
      # Build and Test
      - name: Build CDK App
        run: npm run build
        
      - name: Run Tests
        run: npm test
      
      # Risk Assessment
      - name: Run Risk Assessment
        id: risk-assessment
        run: |
          RESPONSE=$(aws lambda invoke \
            --function-name risk-assessment \
            --payload "$(jq -n --arg sha "${{ github.sha }}" \
              --arg repo "${{ github.repository }}" \
              '{code_changes: $repo, commit: $sha}')" \
            response.json)
          
          ASSESSMENT=$(cat response.json)
          echo "Assessment Result: $ASSESSMENT"
          
          # Extract status from assessment
          STATUS=$(echo $ASSESSMENT | jq -r '.statusCode')
          if [ "$STATUS" != "200" ]; then
            echo "Risk assessment failed or found critical issues"
            # Store the failure reason for the next step
            echo "FAILURE_REASON=$ASSESSMENT" >> $GITHUB_ENV
            exit 1
          fi
          
          # Add assessment as PR comment if this is a pull request
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            gh pr comment ${{ github.event.pull_request.number }} --body "## AI Risk Assessment Results\n$(echo $ASSESSMENT | jq -r '.body')"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Analyze failure using Bedrock if risk assessment fails
      - name: Analyze Failure
        if: failure() && steps.risk-assessment.outcome == 'failure'
        run: |
          # Call the failure analysis Lambda with the failure context
          ANALYSIS_RESPONSE=$(aws lambda invoke \
            --function-name failure-analysis \
            --payload "$(jq -n \
              --arg sha "${{ github.sha }}" \
              --arg repo "${{ github.repository }}" \
              --arg failure "$FAILURE_REASON" \
              '{
                commit: $sha,
                repository: $repo,
                failure_context: $failure,
                workflow_name: "Risk Assessment",
                event_name: "${{ github.event_name }}"
              }')" \
            failure-analysis.json)
          
          # Get the analysis results
          ANALYSIS=$(cat failure-analysis.json)
          echo "Failure Analysis Result:"
          echo "$ANALYSIS" | jq '.'
          
          # Add analysis as PR comment if this is a pull request
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            gh pr comment ${{ github.event.pull_request.number }} --body "## AI Failure Analysis\n$(echo $ANALYSIS | jq -r '.analysis')"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build and Push Container if on main branch
      - name: Login to Amazon ECR
        if: github.ref == 'refs/heads/main' && success()
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        if: github.ref == 'refs/heads/main' && success()
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ai-ml-artifacts
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Update kubeconfig for EKS access
      - name: Update kubeconfig
        if: github.ref == 'refs/heads/main' && success()
        run: |
          aws eks update-kubeconfig --name $(aws eks list-clusters --query 'clusters[0]' --output text)

      # Deploy to EKS if on main branch
      - name: Deploy to EKS
        if: github.ref == 'refs/heads/main' && success()
        run: |
          # Update image tag in deployment manifest
          sed -i "s|image: .*|image: ${{ steps.login-ecr.outputs.registry }}/ai-ml-artifacts:${{ github.sha }}|" kubernetes/deployment.yaml
          
          # Apply deployment
          kubectl apply -f kubernetes/deployment.yaml
          
          # Wait for rollout
          kubectl rollout status deployment/ai-ml-app
